#!/bin/bash
SCRIPT_TITLE="Ecowave"
SCRIPT_ID="ecowave"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
SCRIPT_ICON="$HOME/.local/share/icons/$SCRIPT_ID.svg"

SYSTEMD_SERVICE_NAME='ecowave.service'
SYSTEMD_SERVICE_FILE="/etc/systemd/system/$SYSTEMD_SERVICE_NAME"

# CONFIG
WLAN_MODULE=''
POWER_MAX=''
SERVICE_ENABLED=''
DESKTOP_ICON=''

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

log() {
	printf '%s\n' "$(date "+%Y-%m-%d %H:%M:%S") $SCRIPT_ID | $1"
}

notify() {
	log "$1"
	notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

zenity() {
	/usr/bin/zenity --name="$SCRIPT_ID" --width=360 --height=230 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v iw)" ]; then
	notify-send "ERROR: iw not installed"
	exit 1
fi

if ! [ -x "$(command -v iwconfig)" ]; then
	notify-send "ERROR: wireless_tools not installed"
	exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

	# INIT CONFIG
	if ! init_config; then
		exit 1
	fi

	# TITLE
	txt_title=' <span font_family="monospace" foreground="#A3BE8C" font="18"><b>       '$SCRIPT_TITLE'</b></span>'

	wlan_module_txt=''
	if [ "$WLAN_MODULE" != "" ]; then
		wlan_module_txt_title='  <span font_family="monospace" foreground="#2E3440" font="10">MODULE</span>'
		wlan_module_txt=$wlan_module_txt_title'   <span font_family="monospace" foreground="#2E3440" font="10"><b>'$WLAN_MODULE'</b></span>'
	fi

	# BIT RATE INFO
	bit_rate_value=$(iwconfig $WLAN_MODULE | grep -o 'Bit Rate=[0-9]*' | cut -d'=' -f2)
	if [ "$bit_rate_value" = "" ]; then
		notify "WLAN Bit Rate not found. WLAN Module down?"
		exit 0
	fi
	bit_rate_txt_title='  <span font_family="monospace" foreground="#2E3440" font="10">RATE</span>'
	bit_rate_txt=$bit_rate_txt_title'       <span font_family="monospace" foreground="#2E3440" font="10"><b>'$bit_rate_value' Mb/s</b></span>'

	# TX POWER INFO
	tx_power_value=$(iwconfig $WLAN_MODULE | grep -o 'Tx-Power=[0-9]*' | cut -d'=' -f2)
	if [ "$tx_power_value" = "" ]; then
		notify "WLAN TX POWER not found. WLAN Module down?"
		exit 0
	fi
	tx_power_txt_title='  <span font_family="monospace" foreground="#2E3440" font="10">POWER</span>'
	tx_power_txt=$tx_power_txt_title'     <span font_family="monospace" foreground="#2E3440" font="10"><b>'$tx_power_value' dBm</b></span>'

	# HEADER
	header_txt="$txt_title\n\n$wlan_module_txt\n$bit_rate_txt\n$tx_power_txt"

	# SET MAX VALUE
	if [ $tx_power_value -gt $POWER_MAX ]; then
		tx_power_value=$POWER_MAX
	fi

	# ZENITY

	#zenity_result=$(zenity --scale --min-value=1 --max-value=$POWER_MAX --value="$tx_power_value" --step 1 --cancel-label='Exit' --extra-button='Settings ➤' --ok-label='Save' --text "\t\t\t\t\t$bit_rate_current Mb/s")
	zenity_result=$(zenity --scale --min-value=1 --max-value=$POWER_MAX --value="$tx_power_value" --step 1 --cancel-label='Exit' --extra-button='Settings ➤' --ok-label='Save' --text="$header_txt")

	# ZENITY RESULT
	zenity_result_button="${?}-${zenity_result}"
	case "$zenity_result_button" in
	'1-')
		return 1
		;;
	'0-'*)
		set_tx_power "$zenity_result"
		;;
	'1-Settings'*)
		if settings_result=$(zenity --text-info --width=400 --height=200 --title="Settings" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$SCRIPT_CONFIG"); then
			echo "$settings_result" >"$SCRIPT_CONFIG"
			notify "Settings saved"
		fi
		main
		;;
	esac
}

#--------------------------------------------------------------

init_config() {

	# Defaults
	WLAN_MODULE=''
	POWER_MAX='10'
	SERVICE_ENABLED='true'
	DESKTOP_ICON='true'

	# Create dirs
	mkdir -p "$SCRIPT_HOME"

	# Check config
	check_config "WLAN_MODULE" "$WLAN_MODULE"
	check_config "POWER_MAX" "$POWER_MAX"
	check_config "SERVICE_ENABLED" "$SERVICE_ENABLED"
	check_config "DESKTOP_ICON" "$DESKTOP_ICON"

	# Import script config file
	. "$SCRIPT_CONFIG"

	# CHOOSE WLAN MODULE
	if [ "$WLAN_MODULE" = "" ]; then
		interface_array=()
		while read wlan_line; do
			interface_array+=("$wlan_line")
		done < <(ip link | awk -F: '$0 !~ "lo|vir|tun|enp|^[^0-9]"{print $2;getline}')

		if ! interface="$(zenity --width=250 --height=200 --list --hide-header --column="" --title="WLAN Module" --cancel-label='Cancel' --ok-label='Save' "${interface_array[@]}")"; then
			return 1
		fi

		if [ "$interface" = "" ]; then
			notify "Interface was empty"
			return 1
		fi

		# Set new interface in config file
		set_config "WLAN_MODULE" "$interface"

		# Reload config
		. "$SCRIPT_CONFIG"

		notify "New Interface <b>$interface</b>"
	fi

	# Create or remove desktop icon
	desktop_file="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
	if [ "$DESKTOP_ICON" = "true" ]; then
		if [ ! -f "$desktop_file" ]; then
			{
				echo "[Desktop Entry]"
				echo "Name=$SCRIPT_TITLE"
				echo "Icon=$SCRIPT_ICON"
				echo "Exec=\"$SCRIPT_FILE\""
				echo "Type=Application"
			} >>"$desktop_file"
			chmod +x "$desktop_file"
			log "$desktop_file created"
			notify "Desktop File created"
		fi
	else
		if [ -f "$desktop_file" ]; then
			rm -f "$desktop_file"
			log "$desktop_file removed"
			notify "Desktop File removed"
		fi
	fi
}

#--------------------------------------------------------------

set_tx_power() {
	tx_power="$1"

	# ROOT PASSWORD
	root_password=''
	if ! root_password="$(zenity --width=280 --height=120 --entry --hide-text --text='Enter Root Password')"; then
		main
		return 1
	fi

	# CHECK ROOT PASSWORD
	if ! check_root_password "$root_password"; then
		main
		return 1
	else

		# CREATE SERVICE
		if [ "$SERVICE_ENABLED" = "true" ]; then
			# Create Service file
			{
				echo '[Unit]'
				echo 'Description=ecowave-systemd-service'
				echo 'Wants=network-online.target'
				echo 'After=network-online.target'

				echo '[Service]'
				echo 'Type=simple'
				echo 'ExecStart=iwconfig '$WLAN_MODULE' txpower '$tx_power''

				echo '[Install]'
				echo 'WantedBy=multi-user.target'
			} >"/tmp/$SCRIPT_ID.systemd"

			sh -c "echo $root_password | sudo -S cp /tmp/$SCRIPT_ID.systemd $SYSTEMD_SERVICE_FILE"

			# Start service
			sh -c "echo $root_password | sudo -S chmod 644 $SYSTEMD_SERVICE_FILE"
			sh -c "echo $root_password | sudo -S systemctl enable $SYSTEMD_SERVICE_NAME"
		else
			# Disable & Remove Service
			sh -c "echo $root_password | sudo -S systemctl disable --now $SYSTEMD_SERVICE_NAME"
			sh -c "echo $root_password | sudo -S rm -f $SYSTEMD_SERVICE_FILE"
		fi

		# SET TX POWER
		sh -c "echo $root_password | sudo -S iwconfig $WLAN_MODULE txpower $tx_power"

		# SUCCESS
		notify "Power set to <b>$tx_power</b>"
		main
	fi
}

#--------------------------------------------------------------

print_zenity_header() {

	# TITLE
	txt_title=' <span font_family="monospace" foreground="#81A1C1" font="12"><b>'$SCRIPT_TITLE'</b></span>'

	# STATUS
	icon_status='  <span font_family="monospace" foreground="#BF616A" font="12">✗</span> '
	txt_status='  <span font_family="monospace" foreground="#2E3440" font="9">disabled</span>'
	if check_horst_enabled; then
		icon_status='  <span font_family="monospace" foreground="#A3BE8C" font="12">✔</span> '
		txt_status='  <span font_family="monospace" foreground="#2E3440" font="9">enabled</span>'
	fi

	# SOURCE
	icon_source=''
	txt_source=''
	if check_horst_enabled; then
		icon_source='  <span font_family="monospace" foreground="#EBCB8B" font="12">★</span> '
		txt_source='  <span font_family="monospace" foreground="#2E3440" font="9">'$(count_sources)' Sources</span>\n'
	fi

	# UPDATE
	icon_update=''
	txt_update=''
	if check_horst_enabled; then
		icon_update='  <span font_family="monospace" foreground="#B48EAD" font="12">↺</span> '
		txt_update="$(cat "$HOSTS_VERSION_FILE")"
		txt_update='  <span font_family="monospace" foreground="#2E3440" font="9">'$txt_update'</span>\n'
	fi

	# Print header
	echo "$txt_title\n$icon_status$txt_status\n$icon_source$txt_source$icon_update$txt_update"
}

#------------------------------------------------------------

check_root_password() {
	if [ "$1" = "" ]; then
		notify "Root Password was empty"
		return 1
	fi
	if ! echo "$1" | sudo -S true; then
		notify "Root Password was wrong"
		return 1
	else
		log "Root password correct..."
		return 0
	fi
}

#------------------------------------------------------------

set_config() {
	key="$1"
	value="$2"
	check_config "$key" "$value"
	sed -i "s#$key=.*#$key=\"$value\"#g" "$SCRIPT_CONFIG"
}

#------------------------------------------------------------

check_config() {
	config_key="$1"
	config_value="$2"
	mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
	if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
		echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
	fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
