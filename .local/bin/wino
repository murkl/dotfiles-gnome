#!/bin/bash
SCRIPT_TITLE="Wino"
SCRIPT_ID="wino"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
CONTAINER_DIR="$SCRIPT_HOME/container"
SCRIPT_ICON="$HOME/.local/share/icons/$SCRIPT_ID.svg"

WINE="wine"

# Working dir
WORKING_DIR="$PWD"

WINE_PREFIX_DIR="$WORKING_DIR/prefix"
LAUNCH_CONFIG="$WORKING_DIR/$SCRIPT_ID.conf"

# Defaults
DESKTOP_ICON="true"
WINE_64="true"
MODULES="sandbox"
APP_EXE=""
APP_ARG=""

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=320 --height=180 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

notify() {
    notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v $WINE)" ]; then
    notify "ERROR: wine not installed"
    exit 1
fi

if ! [ -x "$(command -v winetricks)" ]; then
    notify "ERROR: winetricks not installed"
    exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

    # Create dirs
    mkdir -p "$SCRIPT_HOME"
    mkdir -p "$CONTAINER_DIR"

    # Check config
    check_config 'DESKTOP_ICON' "$DESKTOP_ICON"

    # Import script config file
    . "$SCRIPT_CONFIG"

    # Create or remove desktop icon
    desktop_file="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
    if [ "$DESKTOP_ICON" = "true" ]; then
        if [ ! -f "$desktop_file" ]; then
            {
                echo "[Desktop Entry]"
                echo "Name=$SCRIPT_TITLE"
                echo "Icon=$SCRIPT_ICON"
                echo "Exec=\"$SCRIPT_FILE\""
                echo "Type=Application"
            } >>"$desktop_file"
            chmod +x "$desktop_file"
            echo "$desktop_file created"
        fi
    else
        if [ -f "$desktop_file" ]; then
            rm -f "$desktop_file"
            echo "$desktop_file removed"
        fi
    fi

    cd "$WORKING_DIR" || exit 1
    echo "WORKING DIR: $PWD"

    # Show main menu
    show_main_menu
}

#------------------------------------------------------------

print_zenity_header() {

    # TITLE
    txt_title='\t\t\t\t\t<span font_family="monospace" foreground="#81A1C1" font="12"><b>'$SCRIPT_TITLE'</b></span>'

    # STATUS
    status_icon='↺'
    status_color='#BF616A'
    status_txt='Containe: 0'
    if [ -d "$CONTAINER_DIR" ]; then
        container_array=()
        while IFS= read -r -d '' container; do
            container_array+=("$container")
        done < <(find "$CONTAINER_DIR" -name "*.wino" -print0)
        status_icon='↺'
        status_color='#B48EAD'
        status_txt="Container: ${#container_array[@]}"
    fi
    status_icon='  <span font_family="monospace" foreground="'$status_color'" font="12"><b>'$status_icon'</b></span> '
    status_txt=' <span font_family="monospace" foreground="#2E3440" font="9"><b>'$status_txt'</b></span>'

    echo -e "$txt_title\n\n$status_icon$status_txt"
}

#------------------------------------------------------------

check_conf_file() {

    if ! [ -f "$LAUNCH_CONFIG" ]; then
        # TODO
        # check_config "WINE_64" "$WINE_64"
        echo "Creating $LAUNCH_CONFIG..."
        {
            echo "DESKTOP_ICON=$DESKTOP_ICON"
            echo "WINE_64=$WINE_64"
            echo "MODULES=$MODULES"
            echo "APP_EXE=$APP_EXE"
            echo "APP_ARG=$APP_ARG"
        } >"$LAUNCH_CONFIG"
    fi

    # Source launch config file
    . "$LAUNCH_CONFIG"

}

#------------------------------------------------------------

check_prefix_dir() {

    if ! [ -d "$WINE_PREFIX_DIR" ]; then
        echo "Creating wine prefix..."
        wine_arch="win32"
        if [ "$WINE_64" = "true" ]; then
            wine_arch="win64"
        fi
        env WINEARCH="$wine_arch" env WINEPREFIX="$WINE_PREFIX_DIR" wineboot -u
        wait
    fi

}

#------------------------------------------------------------

show_main_menu() {

    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Exit' --ok-label='Ok' 'List Container' 'New Container' 'Settings')"; then
        exit 0
    fi
    case "$zenity_result" in
    'List Container'*)
        zenity_list_container
        #check_conf_file
        #check_prefix_dir
        #start_wine
        ;;
    'New Container'*)
        notify "New Container"
        #check_conf_file
        #check_prefix_dir
        ;;
    'Settings'*)
        notify "Settings"
        #check_conf_file
        #xdg-open "$WORKING_DIR"
        ;;
    esac
}

zenity_list_container() {

    # CONTAINER ARRAY
    container_array=()
    while IFS= read -r -d '' container; do
        container_array+=("$container")
    done < <(find "$CONTAINER_DIR" -name "*.wino" -print0)

    # ZENITY
    container_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Back' --extra-button='Remove' --ok-label='Edit' "${container_array[@]}")"

    # ZENITY RESULT
    container_result_button="${?}-${container_result}"
    case "$container_result_button" in
    '1-')
        show_main_menu
        return 1
        ;;
    '0-'*)
        notify "Edit"
        return 1
        ;;

    '1-Remove'*)
        notify "Remove"
        return 1
        ;;
    esac
}

#------------------------------------------------------------

start_wine() {

    # Source launch config file
    #if [ -f "$LAUNCH_CONFIG" ]; then
    #    . "$LAUNCH_CONFIG"
    #fi

    cd "$WINE_PREFIX_DIR" || exit 1

    if ! [ -f "$APP_EXE" ]; then
        echo "Installation..."

        FILE=$(zenity --file-selection --title="Select a File")

        case $? in
        0)
            echo "\"$FILE\" selected."
            env WINEPREFIX="$WINE_PREFIX_DIR" "$WINE" "$FILE"
            wait

            if [ "$WINETRICKS_MODULES" != "" ]; then
                env WINEPREFIX="$WINE_PREFIX_DIR" winetricks $MODULES
                wait
            fi
            ;;
        1)
            echo "No file selected."
            ;;
        -1)
            echo "An unexpected error has occurred."
            ;;
        esac

    else
        env WINEPREFIX="$WINE_PREFIX_DIR" "$WINE" "$APP_EXE" $APP_ARG
        wait
    fi

}

#------------------------------------------------------------

kill_pid() {
    pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done
}

#--------------------------------------------------------------

check_config() {
    config_key="$1"
    config_value="$2"
    mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
    if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
    fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
