#!/bin/bash
SCRIPT_TITLE="Wino"
SCRIPT_ID="wino"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WORKING DIR
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
WORKING_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$WORKING_DIR/$(basename "$0")"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
CONTAINER_DIR="$SCRIPT_HOME/container"
SCRIPT_ICON="$SCRIPT_ID"

WINE="wine"

WINE_PREFIX_DIR="$WORKING_DIR/prefix"
LAUNCH_CONFIG="$WORKING_DIR/$SCRIPT_ID.conf"

# Defaults
DESKTOP_ICON="true"
WINE_64="true"
MODULES="sandbox"
APP_EXE=""
APP_ARG=""

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

log() {
    printf '%s\n' "$(date "+%Y-%m-%d %H:%M:%S") $SCRIPT_ID | $1"
}

notify() {
    log "$1"
    notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=320 --height=180 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v $WINE)" ]; then
    notify "ERROR: wine not installed"
    exit 1
fi

if ! [ -x "$(command -v winetricks)" ]; then
    notify "ERROR: winetricks not installed"
    exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

    # Create dirs
    mkdir -p "$SCRIPT_HOME"
    mkdir -p "$CONTAINER_DIR"

    # Check config
    check_config 'DESKTOP_ICON' "$DESKTOP_ICON"

    # Import script config file
    . "$SCRIPT_CONFIG"

    # Create or remove desktop icon
    local desktop_file="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
    if [ "$DESKTOP_ICON" = "true" ]; then
        if [ ! -f "$desktop_file" ]; then
            {
                echo "[Desktop Entry]"
                echo "Name=$SCRIPT_TITLE"
                echo "Icon=$SCRIPT_ICON"
                echo "Exec=$SCRIPT_ID"
                echo "Type=Application"
            } >>"$desktop_file"
            chmod +x "$desktop_file"
            echo "$desktop_file created"
        fi
    else
        if [ -f "$desktop_file" ]; then
            rm -f "$desktop_file"
            echo "$desktop_file removed"
        fi
    fi

    cd "$WORKING_DIR" || exit 1
    echo "WORKING DIR: $PWD"

    # ARGUMENTS

    # Open file
    if [ -f "$1" ]; then
        # Run in bottle or create new one
        zenity_bottles_menu
        return
    fi

    # Open in dir
    if [ -d "$1" ]; then
        # If wino file exists:
        zenity_bottle_action_menu
        # else
        # Create Bottle
        return
    fi

    # Default: Show main menu
    if [ "$1" = "" ]; then
        show_main_menu
        return
    fi
}

#------------------------------------------------------------

print_zenity_header() {

    # TITLE
    local txt_title='\t\t\t\t\t<span font_family="monospace" foreground="#81A1C1" font="12"><b>'$SCRIPT_TITLE'</b></span>'

    # STATUS
    local bottles_icon='Bottles:'
    local bottles_color='#2E3440'
    local bottles_txt='0'
    if [ -d "$CONTAINER_DIR" ]; then
        local container_array=()
        while IFS= read -r -d '' container; do
            container_array+=("$container")
        done < <(find "$CONTAINER_DIR" -name "*.wino" -print0)
        bottles_icon='Bottles:'
        bottles_color='#2E3440'
        bottles_txt="${#container_array[@]}"
    fi
    bottles_icon=' <span font_family="monospace" foreground="'$bottles_color'" font="9"><b>'$bottles_icon'</b></span> '
    bottles_txt=' <span font_family="monospace" foreground="#2E3440" font="9">'$bottles_txt'</span>'

    echo -e "$txt_title\n\n$bottles_icon$bottles_txt"
}

#------------------------------------------------------------

check_conf_file() {

    if ! [ -f "$LAUNCH_CONFIG" ]; then
        # TODO
        # check_config "WINE_64" "$WINE_64"
        echo "Creating $LAUNCH_CONFIG..."
        {
            echo "DESKTOP_ICON=$DESKTOP_ICON"
            echo "WINE_64=$WINE_64"
            echo "MODULES=$MODULES"
            echo "APP_EXE=$APP_EXE"
            echo "APP_ARG=$APP_ARG"
        } >"$LAUNCH_CONFIG"
    fi

    # Source launch config file
    . "$LAUNCH_CONFIG"

}

#------------------------------------------------------------

check_prefix_dir() {

    if ! [ -d "$WINE_PREFIX_DIR" ]; then
        echo "Creating wine prefix..."
        local wine_arch="win32"
        if [ "$WINE_64" = "true" ]; then
            wine_arch="win64"
        fi
        env WINEARCH="$wine_arch" env WINEPREFIX="$WINE_PREFIX_DIR" wineboot -u
        wait
    fi

}

#------------------------------------------------------------

show_main_menu() {

    if ! local zenity_result="$(zenity --height=220 --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Exit' --ok-label='Ok' 'Bottle Manager' 'Settings' 'Help')"; then
        exit 0
    fi

    case "$zenity_result" in

    'Bottle Manager'*)
        zenity_bottles_menu
        return
        #check_conf_file
        #check_prefix_dir
        #start_wine
        ;;
    'Settings')
        notify "Settings"
        show_main_menu
        #check_conf_file
        #xdg-open "$WORKING_DIR"
        ;;
    'Help')
        notify "Help"
        show_main_menu
        ;;

    esac
}

#------------------------------------------------------------

zenity_bottles_menu() {

    # CONTAINER ARRAY
    local container_array=()
    while IFS= read -r -d '' container; do
        container_array+=("$(basename "$container")")
    done < <(find "$CONTAINER_DIR" -name "*.wino" -print0)

    # ZENITY
    local zenity_result="$(zenity --height=240 --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Back' --extra-button='New ➤' --ok-label='Select' "${container_array[@]}")"

    # ZENITY RESULT
    local zenity_result_button="${?}-${zenity_result}"
    case "$zenity_result_button" in
    '0-')
        show_main_menu
        ;;
    '0-New ➤')
        notify "New"
        show_main_menu
        ;;
    '0-'*)
        zenity_bottle_action_menu "$zenity_result"
        zenity_bottles_menu
        ;;

    esac
}

#------------------------------------------------------------

zenity_bottle_action_menu() {

    local bottle="$1"
    local txt_title='\t\t\t\t\t<span font_family="monospace" foreground="#81A1C1" font="12"><b>'$SCRIPT_TITLE'</b></span>'

    if ! local zenity_result="$(zenity --height=280 --list --hide-header --column="" --text="$txt_title\n\n <b>Bottle:</b>  $bottle" --cancel-label='Back' --ok-label='Ok' 'Edit Configuration' 'Start' 'Run .exe' 'Open Wine Config' 'Open Winetricks' 'Remove Bottle')"; then
        return 1
    fi

    case "$zenity_result" in

    'Start Bottle')
        notify "Start $bottle"
        ;;

    'Edit Bottle Config')
        notify "Edit $bottle"
        ;;

    esac

}

#------------------------------------------------------------

start_wine() {

    # Source launch config file
    #if [ -f "$LAUNCH_CONFIG" ]; then
    #    . "$LAUNCH_CONFIG"
    #fi

    cd "$WINE_PREFIX_DIR" || exit 1

    if ! [ -f "$APP_EXE" ]; then
        echo "Installation..."

        FILE=$(zenity --file-selection --title="Select a File")

        case $? in
        0)
            echo "\"$FILE\" selected."
            env WINEPREFIX="$WINE_PREFIX_DIR" "$WINE" "$FILE"
            wait

            if [ "$WINETRICKS_MODULES" != "" ]; then
                env WINEPREFIX="$WINE_PREFIX_DIR" winetricks $MODULES
                wait
            fi
            ;;
        1)
            echo "No file selected."
            ;;
        -1)
            echo "An unexpected error has occurred."
            ;;
        esac

    else
        env WINEPREFIX="$WINE_PREFIX_DIR" "$WINE" "$APP_EXE" $APP_ARG
        wait
    fi

}

#--------------------------------------------------------------

check_config() {
    local config_key="$1"
    local config_value="$2"
    mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
    if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
    fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
