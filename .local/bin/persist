#!/bin/bash
SCRIPT_TITLE="Persist"
SCRIPT_ID="persist"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
SCRIPT_ICON="$HOME/.local/share/icons/$SCRIPT_ID.svg"
PROCESS_FILE="/tmp/$SCRIPT_ID.pids"

# Singleton
TASK_PID=''
TASK_URL=''

# Config defaults
DESKTOP_ICON='true'
MUSIC_DOWNLOAD_DIR='$HOME/Downloads/Music'
VIDEO_DOWNLOAD_DIR='$HOME/Downloads/Videos'
MOVIE_DOWNLOAD_DIR='$HOME/Downloads/Movies'

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

zenity() {
	/usr/bin/zenity --name="$SCRIPT_ID" --width=420 --height=140 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

notify() {
	notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v /usr/bin/zenity)" ]; then
	notify "ERROR: zenity not installed"
	exit 1
fi

if ! [ -x "$(command -v youtube-dl)" ]; then
	notify "ERROR: youtube-dl not installed"
	exit 1
fi

if ! [ -x "$(command -v ffmpeg)" ]; then
	notify "ERROR: ffmpeg not installed"
	exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

	# Init script
	init

	# Show url menu
	show_url_menu
}

#------------------------------------------------------------

init() {

	# Create script home
	mkdir -p "$SCRIPT_HOME"

	# Check config
	check_config 'DESKTOP_ICON' "$DESKTOP_ICON"
	check_config 'MUSIC_DOWNLOAD_DIR' "$MUSIC_DOWNLOAD_DIR"
	check_config 'VIDEO_DOWNLOAD_DIR' "$VIDEO_DOWNLOAD_DIR"
	check_config 'MOVIE_DOWNLOAD_DIR' "$MOVIE_DOWNLOAD_DIR"

	# Import script config file
	. "$SCRIPT_CONFIG"

	# Create or remove desktop icon
	desktop_file="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
	if [ "$DESKTOP_ICON" = "true" ]; then
		if [ ! -f "$desktop_file" ]; then
			{
				echo "[Desktop Entry]"
				echo "Name=$SCRIPT_TITLE"
				echo "Icon=$SCRIPT_ICON"
				echo "Exec=\"$SCRIPT_FILE\""
				echo "Type=Application"
			} >>"$desktop_file"
			chmod +x "$desktop_file"
			echo "$desktop_file created"
		fi
	else
		if [ -f "$desktop_file" ]; then
			rm -f "$desktop_file"
			echo "$desktop_file removed"
		fi
	fi
}

#------------------------------------------------------------

show_url_menu() {

	zenity_result="$(zenity --entry --title="URL" --cancel-label='Exit' --extra-button='Menu ➤' --ok-label='Download' --entry-text="$TASK_URL")"
	zenity_result_button="${?}-${zenity_result}"
	case "$zenity_result_button" in
	'1-')
		exit 0
		;;
	'0-'*)
		TASK_URL="$zenity_result"
		if [ "$TASK_URL" = "" ]; then
			notify "URL was empty"
			main
		else
			show_download_type_menu "$TASK_URL"
		fi
		;;
	'1-Menu'*)
		show_options_menu
		;;
	esac
}

#------------------------------------------------------------

show_download_type_menu() {

	if ! zenity_result="$(zenity --list --hide-header --column="" --title="Download Type" --cancel-label='Back' --ok-label='Download' 'Music' 'Movie' 'Video')"; then
		main
	fi
	case "$zenity_result" in
	'Music')
		dl_music "$1"
		;;
	'Movie')
		dl_movie "$1"
		;;
	'Video')
		dl_video "$1"
		;;
	esac
}

#------------------------------------------------------------

show_options_menu() {

	tasks_array=()
	if [ ! -s "$PROCESS_FILE" ]; then
		tasks_array+=('∅ Downloads empty')
	else
		# Read every line from process file
		while IFS= read -r line; do
			task_pid=$(echo "$line" | cut -f 1 -d '|')
			task_type=$(echo "$line" | cut -f 2 -d '|')
			task_name=$(echo "$line" | cut -f 3 -d '|')
			tasks_array+=("$task_name")
		done <$PROCESS_FILE
	fi

	zenity_result="$(zenity --list --height=200 --hide-header --column="" --title='Running Downloads' --cancel-label='Back' --extra-button='Settings ➤' --ok-label='Stop' "${tasks_array[@]}")"
	zenity_result_button="${?}-${zenity_result}"
	case "$zenity_result_button" in
	'1-')
		# Back
		main
		;;
	'0-'*)
		# Stop download
		while IFS= read -r line; do
			task_pid=$(echo "$line" | cut -f 1 -d '|')
			task_name=$(echo "$line" | cut -f 3 -d '|')
			if [ "$task_name" = "$zenity_result" ]; then
				if zenity --question --width=220 --text="Cancel: $task_name?"; then
					kill_pid "$task_pid"
					notify "Canceled: $task_name"
				fi
			fi
		done <$PROCESS_FILE
		show_options_menu
		;;
	'1-Settings'*)
		# Open settings
		if result=$(zenity --text-info --height=200 --title="Settings" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$SCRIPT_CONFIG"); then
			echo "$result" >"$SCRIPT_CONFIG"
			notify "Settings saved"
		fi
		show_options_menu
		;;
	esac
}

#------------------------------------------------------------

dl_music() {

	# Ask for converter
	convert_enabled=false

	if zenity --question --width=220 --text="Convert to 432Hz?"; then
		convert_enabled=true
	fi

	# Fetch title
	(echo $(youtube-dl --get-title --restrict-filenames $1) >"/tmp/$SCRIPT_ID.fetch") | zenity --progress --pulsate --auto-close --no-cancel --auto-kill --title="Fetching Meta Information..."
	music_title=$(<"/tmp/$SCRIPT_ID.fetch")

	music_title=$(zenity --entry --title="Music Title" --entry-text="$music_title") || main
	if [ "$music_title" = "" ]; then
		notify "Title was empty"
		main
		return 1
	fi

	# Download
	notify "Download: $music_title"
	mkdir -p "$MUSIC_DOWNLOAD_DIR"

	(
		if ! youtube-dl -f 'bestaudio/best' --extract-audio --audio-quality 0 --audio-format mp3 --metadata-from-title "%(artist)s - %(title)s" --restrict-filenames -o "$MUSIC_DOWNLOAD_DIR/$music_title.%(ext)s" "$1"; then
			notify "Error: $music_title"
			exit 1
		fi

		# Convert
		if [ "$convert_enabled" = "true" ]; then
			input_file="$MUSIC_DOWNLOAD_DIR/$music_title.mp3"
			file_name="${input_file%.*}"
			file_extension="${input_file##*.}"
			output_file="$file_name (432Hz).$file_extension"
			if ! ffmpeg -y -i "$input_file" -filter:a "atempo=0.98182" -ab 256k "$output_file"; then
				return 1
			fi
			if [ -f "$output_file" ]; then
				rm -v "$input_file"
			fi
		fi

		notify "Finished: $music_title"
	) &

	# Set process
	TASK_PID="$!"
	echo "$TASK_PID|MUSIC|$music_title" >>"$PROCESS_FILE"
}

#------------------------------------------------------------

dl_video() {

	# Ask for quality
	if ! quality_result="$(zenity --list --height=200 --hide-header --column="" --title="Video Quality" --cancel-label='Cancel' --ok-label='Download' 'Original' '1080p' '720p' '480p' '240p')"; then
		main
	fi
	if [ "$quality_result" = "Original" ]; then
		video_quality=10000
	else
		video_quality=$(echo "$quality_result" | tr 'p' ' ')
	fi

	# Fetch title
	(echo $(youtube-dl --get-title --restrict-filenames $1) >"/tmp/$SCRIPT_ID.fetch") | zenity --progress --pulsate --auto-close --no-cancel --auto-kill --title="Fetching Meta Information..."
	video_title=$(<"/tmp/$SCRIPT_ID.fetch")

	video_title=$(zenity --entry --title="Video Title" --entry-text="$video_title") || main
	if [ "$video_title" = "" ]; then
		notify "Title was empty"
		main
		return 1
	fi

	# Download
	notify "Download: $video_title"
	mkdir -p "$VIDEO_DOWNLOAD_DIR"

	(
		if ! youtube-dl -f "bestvideo[height<=$video_quality]+bestaudio/best[height<=$video_quality]" --restrict-filenames -o "$VIDEO_DOWNLOAD_DIR/$video_title.%(ext)s" "$1"; then
			notify "Error: $video_title"
			exit 1
		fi

		notify "Finished: $video_title"
	) &

	# Set process
	TASK_PID="$!"
	echo "$TASK_PID|VIDEO|$video_title" >>"$PROCESS_FILE"
}

#------------------------------------------------------------

dl_movie() {

	# Ask for movie title
	movie_title=$(zenity --entry --title="Movie Title" --entry-text="") || main
	if [ "$movie_title" = "" ]; then
		notify "Title was empty"
		main
		return 1
	fi

	# Download
	notify "Download: $movie_title"
	mkdir -p "$MOVIE_DOWNLOAD_DIR"

	(
		if ! youtube-dl --output "$MOVIE_DOWNLOAD_DIR/$movie_title.%(ext)s" "$1"; then
			notify "Error: $movie_title"
			exit 1
		fi

		notify "Finished: $movie_title"
	) &

	# Set process
	TASK_PID="$!"
	echo "$TASK_PID|MOVIE|$movie_title" >>"$PROCESS_FILE"
}

#------------------------------------------------------------

kill_pid() {
	pid_kill="$1"
	print_children_pid() {
		local children_pid
		children_pid="$(pgrep -P "$1")"
		for pid in $children_pid; do
			print_children_pid "$pid"
		done
		if [ "$children_pid" != "" ]; then
			printf "$children_pid "
		fi
	}

	pid_array=()
	pid_array+=("$pid_kill")
	pid_array+=($(print_children_pid "$pid_kill"))
	for pid in ${pid_array[@]}; do
		kill -9 "$pid"
	done

	# Remove pid from file
	sed -i "/$pid_kill/d" "$PROCESS_FILE"
}

#--------------------------------------------------------------

check_config() {
	config_key="$1"
	config_value="$2"
	mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
	if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
		echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
	fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# TRAP
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

on_trap() {
	if [ "$TASK_PID" != "" ]; then
		kill_pid $TASK_PID
	fi
}

# Set trap
trap 'on_trap' 0 1 3 6

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# Main
main "$@"

# Wait for sub process
wait
