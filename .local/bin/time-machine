#!/bin/bash
SCRIPT_TITLE="Time Machine"
SCRIPT_ID="time-machine"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# VARIABLES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

SCRIPT_DIR="$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd)"
SCRIPT_FILE="$SCRIPT_DIR/$(basename "$0")"
SCRIPT_HOME="$HOME/.config/$SCRIPT_ID"
SCRIPT_CONFIG="$SCRIPT_HOME/config"
SCRIPT_ICON="$SCRIPT_ID"

TIMESTAMP="$(date +%Y-%m-%d)"
EXCLUDE_FILE="$SCRIPT_HOME/excludes"
LOG_FILE="$HOME/.cache/$SCRIPT_ID.log"
STATE_FILE="$HOME/.cache/$SCRIPT_ID.state"
TIMESTAMP_CACHED_FILE="$HOME/.cache/$SCRIPT_ID.timestamp"

RSYNC_ARGS="--numeric-ids --links --hard-links --one-file-system --itemize-changes --times --recursive --perms --owner --group --stats --human-readable"

# Config defaults
DESKTOP_ICON="true"
BACKUP_SOURCE="$HOME"
BACKUP_DESTINATION=""

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# WRAPPER
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

zenity() {
    /usr/bin/zenity --name="$SCRIPT_ID" --width=340 --height=200 --title='' --text='' --window-icon="$SCRIPT_ICON" "$@" 2>/dev/null
}

notify() {
    notify-send --icon="$SCRIPT_ICON" "$SCRIPT_TITLE" "$1"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v /usr/bin/zenity)" ]; then
    notify "ERROR: zenity not installed"
    exit 1
fi

if ! [ -x "$(command -v rsync)" ]; then
    notify "ERROR: rsync not installed"
    exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

    # Init
    init

    # Show main menu
    show_main_menu
}

#------------------------------------------------------------

init() {

    # Create script home
    mkdir -p "$SCRIPT_HOME"

    # Check config
    check_config 'DESKTOP_ICON' "$DESKTOP_ICON"
    check_config 'BACKUP_SOURCE' "$BACKUP_SOURCE"
    check_config 'BACKUP_DESTINATION' "$BACKUP_DESTINATION"

    # Import script config file
    . "$SCRIPT_CONFIG"

    # Create exclude file
    if [ ! -f "$EXCLUDE_FILE" ]; then
        {
            echo "[Cc]ache*"
            echo "[Tt]rash*"
            echo ".cache"
            echo ".gvfs"
            echo "~*"
        } >>"$EXCLUDE_FILE"
        echo "$EXCLUDE_FILE created"
    fi

    # Create or remove desktop icon
    desktop_file="$HOME/.local/share/applications/$SCRIPT_ID.desktop"
    if [ "$DESKTOP_ICON" = "true" ]; then
        if [ ! -f "$desktop_file" ]; then
            {
                echo "[Desktop Entry]"
                echo "Name=$SCRIPT_TITLE"
                echo "Icon=$SCRIPT_ICON"
                echo "Exec=$SCRIPT_ID"
                echo "Type=Application"
            } >>"$desktop_file"
            chmod +x "$desktop_file"
            echo "$desktop_file created"
        fi
    else
        if [ -f "$desktop_file" ]; then
            rm -f "$desktop_file"
            echo "$desktop_file removed"
        fi
    fi
}

#------------------------------------------------------------

print_zenity_header() {

    # TITLE
    txt_title='\t\t\t\t<span font_family="monospace" foreground="#A3BE8C" font="12"><b>'$SCRIPT_TITLE'</b></span>'

    # STATUS
    status_icon='∅'
    status_color='#BF616A'
    status_txt='HDD not mounted'
    if [ -f "$TIMESTAMP_CACHED_FILE" ]; then
        status_icon='↺'
        status_color='#5d88cf'
        status_txt=$(<"$TIMESTAMP_CACHED_FILE")
    fi
    if [ -d "$BACKUP_DESTINATION" ]; then
        status_icon='↺'
        status_color='#B48EAD'
        status_txt='no snapshot found'
    fi
    if [ -s "$BACKUP_DESTINATION/latest" ]; then
        status_icon='↺'
        status_color='#A3BE8C'
        latest_path=$(readlink "$BACKUP_DESTINATION/latest")
        status_txt="$(basename "${latest_path}")"
        echo "$status_txt" >"$TIMESTAMP_CACHED_FILE"
    fi
    status_icon='  <span font_family="monospace" foreground="'$status_color'" font="14"><b>'$status_icon'</b></span> '
    status_txt=' <span font_family="monospace" foreground="'$status_color'" font="9"><b>'$status_txt'</b></span>'

    echo -e "$txt_title\n\n$status_icon$status_txt"
}

#------------------------------------------------------------

show_main_menu() {

    if ! zenity_result="$(zenity --list --hide-header --column="" --text="$(print_zenity_header)" --cancel-label='Exit' --ok-label='Ok' 'Create Snapshot' 'Browse Snapshots' 'Settings')"; then
        exit 0
    fi
    case "$zenity_result" in
    'Create Snapshot')
        create_backup
        ;;
    'Browse Snapshots')
        if [ -d "$BACKUP_DESTINATION" ]; then
            xdg-open "$BACKUP_DESTINATION"
        else
            notify "HDD not mounted"
            show_main_menu
        fi
        ;;
    'Settings')
        show_settings_menu
        ;;
    esac
}

#------------------------------------------------------------

show_settings_menu() {
    if ! zenity_result="$(zenity --list --hide-header --column="" --title="Settings" --text="$(print_zenity_header)" --cancel-label='Back' --ok-label='Ok' 'Edit Configuration' 'Edit Excludes')"; then
        main
    fi
    case "$zenity_result" in
    'Edit Configuration')
        if result=$(zenity --text-info --width=550 --height=300 --title="Configuration" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$SCRIPT_CONFIG"); then
            echo "$result" >"$SCRIPT_CONFIG"
            notify "Configuration saved"
            main
            return
        fi
        show_settings_menu
        ;;
    'Edit Excludes')
        if result=$(zenity --text-info --width=550 --height=300 --title="Excludes" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$EXCLUDE_FILE"); then
            echo "$result" >"$EXCLUDE_FILE"
            notify "Excludes saved"
        fi
        show_settings_menu
        ;;
    esac
}

#------------------------------------------------------------

create_backup() {

    if ! [ -d "$BACKUP_SOURCE" ]; then
        notify "Source not set"
        show_main_menu
        return 1
    fi

    if ! [ -d "$BACKUP_DESTINATION" ]; then
        notify "HDD not mounted"
        show_main_menu
        return 1
    fi

    (
        cd "$BACKUP_SOURCE" || exit 1
        rm -f "$LOG_FILE"
        if ! rsync $RSYNC_ARGS --exclude-from="$EXCLUDE_FILE" . "$BACKUP_DESTINATION/$TIMESTAMP/" --link-dest="$BACKUP_DESTINATION/latest/" >>$LOG_FILE 2>&1; then
            notify "Backup failed: rsync error"
            zenity --text-info --width=600 --height=400 --title="Log" --cancel-label="Exit" --ok-label="Close" --font="monospace" --filename="$LOG_FILE"
            exit 1
        fi
        wait
        ln -nsf "$BACKUP_DESTINATION/$TIMESTAMP" "$BACKUP_DESTINATION/latest" >>$LOG_FILE 2>&1
        echo "SUCCESS" >"$STATE_FILE"
    ) &

    # Capture pid and show progress dialog
    task_pid="$!"
    echo "$task_pid" >"$STATE_FILE"
    txt_title='\t\t\t\t<span font_family="monospace" foreground="#A3BE8C" font="12"><b>'$SCRIPT_TITLE'</b></span>'
    tail -f /dev/null --pid $task_pid | (zenity --progress --width=320 --height=180 --cancel-label="Cancel Backup" --text="$txt_title\n\n\t\t\t\t <b>Creating Snapshot</b>\n" --pulsate --auto-close || (kill_pid "$task_pid" && echo "CANCELED" >"$STATE_FILE"))

    backup_state=$(<"$STATE_FILE")

    if [ "$backup_state" = "SUCCESS" ]; then
        notify "Backup finished"
        if ! zenity --text-info --width=600 --height=400 --title="Log" --cancel-label="Exit" --ok-label="Close" --font="monospace" --filename="$LOG_FILE"; then
            exit 0
        else
            show_main_menu
        fi
    fi

    if [ "$backup_state" = "CANCELED" ]; then
        notify "Backup canceled"
        show_main_menu

    fi
}

#------------------------------------------------------------

kill_pid() {
    pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done
}

#--------------------------------------------------------------

check_config() {
    config_key="$1"
    config_value="$2"
    mkdir -p "$SCRIPT_HOME" && touch "$SCRIPT_CONFIG"
    if ! grep -qrnw "$SCRIPT_CONFIG" -e "$config_key=*"; then
        echo "$config_key=\"$config_value\"" >>"$SCRIPT_CONFIG"
    fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
